{"version":3,"sources":["../../../Desktop/BCIT/web-scripting-3/hw03/src/globals/calculator-button-data.js","../../../Desktop/BCIT/web-scripting-3/hw03/src/components/App.js","../../../Desktop/BCIT/web-scripting-3/hw03/src/components/functions.js","../../../Desktop/BCIT/web-scripting-3/hw03/src/index.js"],"names":["calculatorButtons","type","className","text","value","App","storeNum","setStoreNum","useState","showNum","setShowNum","operator","setOperator","undefined","memoryStore","setMemoryStore","operatorClickedLastTime","setOperatorClickedLastTime","onButtonClick","e","buttonInfo","console","log","selectedBtnType","selectedBtnValue","newNum","String","length","alert","str","alreadyHadDecimal","i","doubleDecimalCheck","newOperator","Number","calNum","percentCalNum","squareRootCalNum","Math","sqrt","equalCalResult","Infinity","isNaN","ret","memory","calculateShowText","React","createElement","buttons","calculatorButton","push","key","concat","onClick","importButtons","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAAO,MAAMA,EAAoB,CAC/B,CACEC,KAAM,QACNC,UAAW,KACXC,KAAM,KACNC,MAAO,aAET,CACEH,KAAM,QACNC,UAAW,IACXC,KAAM,IACNC,MAAO,SAET,CACEH,KAAM,SACNC,UAAW,KACXC,KAAM,KACNC,MAAO,eAET,CACEH,KAAM,SACNC,UAAW,KACXC,KAAM,KACNC,MAAO,gBAET,CACEH,KAAM,SACNC,UAAW,KACXC,KAAM,KACNC,MAAO,iBAET,CACEH,KAAM,SACNC,UAAW,UACXC,KAAM,KACNC,MAAO,mBAET,CACEH,KAAM,SACNC,UAAW,SACXC,KAAM,KACNC,MAAO,mBAET,CACEH,KAAM,SACNC,UAAW,QACXC,KAAM,EACNC,MAAO,GAET,CACEH,KAAM,SACNC,UAAW,QACXC,KAAM,EACNC,MAAO,GAET,CACEH,KAAM,SACNC,UAAW,OACXC,KAAM,EACNC,MAAO,GAET,CACEH,KAAM,SACNC,UAAW,OACXC,KAAM,EACNC,MAAO,GAET,CACEH,KAAM,SACNC,UAAW,OACXC,KAAM,EACNC,MAAO,GAET,CACEH,KAAM,SACNC,UAAW,MACXC,KAAM,EACNC,MAAO,GAET,CACEH,KAAM,SACNC,UAAW,MACXC,KAAM,EACNC,MAAO,GAET,CACEH,KAAM,SACNC,UAAW,MACXC,KAAM,EACNC,MAAO,GAET,CACEH,KAAM,SACNC,UAAW,QACXC,KAAM,EACNC,MAAO,GAET,CACEH,KAAM,SACNC,UAAW,OACXC,KAAM,EACNC,MAAO,GAET,CACEH,KAAM,UACNC,UAAW,UACXC,KAAM,IACNC,MAAO,KAET,CACEH,KAAM,OACNC,UAAW,OACXC,KAAM,MACNC,MAAO,OAET,CACEH,KAAM,WACNC,UAAW,UACXC,KAAM,IACNC,MAAO,WAET,CACEH,KAAM,WACNC,UAAW,cACXC,KAAM,SACNC,MAAO,eAET,CACEH,KAAM,WACNC,UAAW,WACXC,KAAM,OACNC,MAAO,YAET,CACEH,KAAM,WACNC,UAAW,SACXC,KAAM,OACNC,MAAO,UAET,CACEH,KAAM,WACNC,UAAW,MACXC,KAAM,IACNC,MAAO,O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","file":"static/js/main.1e8a8ec4.chunk.js","sourcesContent":["export const calculatorButtons = [\n  {\n    type: \"clear\",\n    className: \"ac\",\n    text: \"AC\",\n    value: \"All Clear\",\n  },\n  {\n    type: \"clear\",\n    className: \"c\",\n    text: \"C\",\n    value: \"Clear\",\n  },\n  {\n    type: \"memory\",\n    className: \"ms\",\n    text: \"MS\",\n    value: \"Memory Save\",\n  },\n  {\n    type: \"memory\",\n    className: \"mc\",\n    text: \"MC\",\n    value: \"Memory Clear\",\n  },\n  {\n    type: \"memory\",\n    className: \"mr\",\n    text: \"MR\",\n    value: \"Memory Recall\",\n  },\n  {\n    type: \"memory\",\n    className: \"m-minus\",\n    text: \"M-\",\n    value: \"Memory Subtract\",\n  },\n  {\n    type: \"memory\",\n    className: \"m-plus\",\n    text: \"M+\",\n    value: \"Memory Addition\",\n  },\n  {\n    type: \"number\",\n    className: \"seven\",\n    text: 7,\n    value: 7,\n  },\n  {\n    type: \"number\",\n    className: \"eight\",\n    text: 8,\n    value: 8,\n  },\n  {\n    type: \"number\",\n    className: \"nine\",\n    text: 9,\n    value: 9,\n  },\n  {\n    type: \"number\",\n    className: \"four\",\n    text: 4,\n    value: 4,\n  },\n  {\n    type: \"number\",\n    className: \"five\",\n    text: 5,\n    value: 5,\n  },\n  {\n    type: \"number\",\n    className: \"six\",\n    text: 6,\n    value: 6,\n  },\n  {\n    type: \"number\",\n    className: \"one\",\n    text: 1,\n    value: 1,\n  },\n  {\n    type: \"number\",\n    className: \"two\",\n    text: 2,\n    value: 2,\n  },\n  {\n    type: \"number\",\n    className: \"three\",\n    text: 3,\n    value: 3,\n  },\n  {\n    type: \"number\",\n    className: \"zero\",\n    text: 0,\n    value: 0,\n  },\n  {\n    type: \"decimal\",\n    className: \"decimal\",\n    text: \".\",\n    value: \".\",\n  },\n  {\n    type: \"sign\",\n    className: \"sign\",\n    text: \"+/-\",\n    value: \"+/-\",\n  },\n  {\n    type: \"operator\",\n    className: \"percent\",\n    text: \"%\",\n    value: \"Percent\",\n  },\n  {\n    type: \"operator\",\n    className: \"square-root\",\n    text: \"\\u221a\",\n    value: \"Square Root\",\n  },\n  {\n    type: \"operator\",\n    className: \"multiply\",\n    text: \"\\u00d7\",\n    value: \"Multiply\",\n  },\n  {\n    type: \"operator\",\n    className: \"divide\",\n    text: \"\\u00f7\",\n    value: \"Divide\",\n  },\n  {\n    type: \"operator\",\n    className: \"add\",\n    text: \"+\",\n    value: \"Add\",\n  },\n  {\n    type: \"operator\",\n    className: \"subtract\",\n    text: \"-\",\n    value: \"Subtract\",\n  },\n  {\n    type: \"enter\",\n    className: \"equal\",\n    text: \"=\",\n    value: \"Equal\",\n  },\n];\n","import React from \"react\";\nimport \"../styles/App.css\";\nimport \"../styles/fonts.css\";\nimport { calculatorButtons } from \"../globals/calculator-button-data\";\nimport { memory, doubleDecimalCheck } from \"./functions\";\nimport { useState } from \"react\";\n\nfunction App() {\n  // can't change storeNum, only use setStoreNum\n  const [storeNum, setStoreNum] = useState(0);\n  const [showNum, setShowNum] = useState(0);\n  const [operator, setOperator] = useState(undefined);\n  const [memoryStore, setMemoryStore] = useState(0);\n  const [operatorClickedLastTime, setOperatorClickedLastTime] = useState(false);\n\n  // import btn data to interface\n  function importButtons() {\n    let buttons = [];\n    for (let i = 0; i < calculatorButtons.length; i++) {\n      let calculatorButton = calculatorButtons[i];\n      buttons.push(\n        <button\n          className={calculatorButton.className}\n          type={calculatorButton.type}\n          value={calculatorButton.value}\n          key={`${i}-${calculatorButton.text}`}\n          onClick={(e) => {\n            onButtonClick(e, calculatorButton);\n          }}\n        >\n          {calculatorButton.text}\n        </button>\n      );\n    }\n    return buttons;\n  }\n\n  function onButtonClick(e, buttonInfo) {\n    console.log(\"in onButtonClick\", buttonInfo);\n    // show selected btn on screen\n    let selectedBtnType = buttonInfo.type;\n    let selectedBtnValue = buttonInfo.value;\n    //\n\n    if (\n      // click operator\n      selectedBtnType === \"operator\" &&\n      selectedBtnValue !== \"Percent\" &&\n      selectedBtnValue !== \"Square Root\"\n    ) {\n      setOperatorClickedLastTime(true);\n    } else {\n      setOperatorClickedLastTime(false);\n    }\n\n    if (selectedBtnType === \"number\" || selectedBtnType === \"decimal\") {\n      if (operatorClickedLastTime === true) {\n        // click after operator, showNum will become new click.value\n        setShowNum(selectedBtnValue);\n      } else {\n        // click after number\n        let newNum = 0;\n        // convert to string, count digits\n        let digit = String(showNum).length;\n        if (digit >= 14) {\n          alert(\"Can't enter more than 14 digits!\");\n          newNum = showNum;\n        } else {\n          if (selectedBtnType === \"number\") {\n            if (showNum === 0) {\n              newNum = selectedBtnValue;\n            } else {\n              newNum = String(showNum) + selectedBtnValue;\n            }\n          } else if (selectedBtnType === \"decimal\") {\n            // forbid multiple decimal click\n            let hadDecimal = doubleDecimalCheck(showNum);\n            if (hadDecimal === true) {\n              newNum = showNum;\n            } else if (showNum === 0) {\n              newNum = \"0.\";\n            } else {\n              //become a string\n              newNum = showNum + \".\";\n            }\n          }\n        }\n        setShowNum(newNum);\n      }\n    } else if (\n      // click operator\n      selectedBtnType === \"operator\" &&\n      selectedBtnValue !== \"Percent\" &&\n      selectedBtnValue !== \"Square Root\"\n    ) {\n      let newOperator;\n      if (operatorClickedLastTime === true) {\n        newOperator = selectedBtnValue;\n      } else {\n        if (\n          showNum === 0 &&\n          operator === undefined &&\n          storeNum === 0 &&\n          memoryStore === 0\n        ) {\n          alert(\"Invalid format used! Please try again.\");\n          setStoreNum(0);\n          setShowNum(0);\n          newOperator = undefined;\n        }\n        //if there isn't an operator,storeNum\n        else if (operator === undefined) {\n          setStoreNum(Number(showNum));\n          setShowNum(Number(showNum));\n          newOperator = selectedBtnValue;\n        } else if (operator !== undefined) {\n          //if there is an operator already,do calculatin and store it in storeNum\n          let calNum;\n          if (operator === \"Add\") {\n            calNum = storeNum + Number(showNum);\n          } else if (operator === \"Subtract\") {\n            calNum = storeNum - Number(showNum);\n          } else if (operator === \"Divide\") {\n            calNum = storeNum / Number(showNum);\n          } else if (operator === \"Multiply\") {\n            calNum = storeNum * Number(showNum);\n          }\n          newOperator = selectedBtnValue;\n          setShowNum(calNum);\n          setStoreNum(calNum);\n        }\n      }\n\n      setOperator(newOperator);\n    } else if (selectedBtnValue === \"Percent\") {\n      //percent\n      let percentCalNum;\n      // convert to string, count digits\n      let digit = String(showNum).length;\n      if (digit >= 14) {\n        alert(\"Can't have more than 14 digits!\");\n        percentCalNum = showNum;\n      } else {\n        if (\n          showNum === 0 &&\n          operator === undefined &&\n          storeNum === 0 &&\n          memoryStore === 0\n        ) {\n          alert(\"Invalid format used! Please try again.\");\n          percentCalNum = 0;\n          setStoreNum(0);\n          setOperator(undefined);\n        } else {\n          percentCalNum = Number(showNum) / 100;\n        }\n      }\n      setShowNum(percentCalNum);\n    } else if (selectedBtnValue === \"Square Root\") {\n      //square root, showNum can't be negative number\n      let squareRootCalNum;\n      if (\n        showNum === 0 &&\n        operator === undefined &&\n        storeNum === 0 &&\n        memoryStore === 0\n      ) {\n        alert(\"Invalid format used! Please try again.\");\n        setShowNum(0);\n        setStoreNum(0);\n        setOperator(undefined);\n      } else {\n        if (Number(showNum) >= 0) {\n          squareRootCalNum = Math.sqrt(Number(showNum));\n          setShowNum(squareRootCalNum);\n        } else {\n          alert(\"Invalid format used!\");\n        }\n      }\n    } else if (selectedBtnType === \"enter\") {\n      // click \"Equal\"\n      let equalCalResult;\n      if (\n        showNum === 0 &&\n        operator === undefined &&\n        storeNum === 0 &&\n        memoryStore === 0\n      ) {\n        equalCalResult = 0;\n        setStoreNum(0);\n      } else if (operator === undefined) {\n        equalCalResult = showNum;\n      } else {\n        if (operator === \"Add\") {\n          equalCalResult = storeNum + Number(showNum);\n        } else if (operator === \"Subtract\") {\n          equalCalResult = storeNum - Number(showNum);\n        } else if (operator === \"Divide\") {\n          equalCalResult = storeNum / Number(showNum);\n        } else if (operator === \"Multiply\") {\n          equalCalResult = storeNum * Number(showNum);\n        }\n\n        // error control\n        if (\n          equalCalResult === Infinity ||\n          Number.isNaN(equalCalResult) === true\n        ) {\n          alert(\"Invalid format used! Please try again.\");\n          equalCalResult = 0;\n          setStoreNum(0);\n        }\n      }\n\n      setShowNum(equalCalResult);\n      setOperator(undefined);\n    } else if (selectedBtnType === \"memory\") {\n      //Memory keys\n      let ret = memory(showNum, selectedBtnValue, memoryStore);\n      setShowNum(ret.showNum);\n      setMemoryStore(ret.memoryStore);\n    } else if (selectedBtnType === \"sign\") {\n      if (showNum === 0) {\n        setShowNum(0);\n      } else {\n        setShowNum(-Number(showNum));\n      }\n    }\n\n    // AC & C btns\n    if (buttonInfo.text === \"AC\") {\n      setShowNum(0);\n      setStoreNum(0);\n      setOperator(undefined);\n    } else if (buttonInfo.text === \"C\") {\n      // clear showNum\n      setShowNum(0);\n    }\n  }\n\n  function calculateShowText() {\n    return showNum;\n  }\n  console.log(\"storeNum: \", storeNum);\n  console.log(\"calculateShowText: \", calculateShowText());\n  console.log(\"Operator: \", operator);\n  console.log(\"memoryStore: \", memoryStore);\n  console.log(\"typeof :\", typeof showNum);\n\n  return (\n    <div className=\"wrapper\">\n      <section>\n        <h1>Nate Calculator</h1>\n      </section>\n      <section>\n        <div className=\"cal-border\">\n          <div className=\"resultBar\">\n            <h2>{calculateShowText()}</h2>\n          </div>\n          {/* {importButtons()} when u want to call the function right now */}\n          <div className=\"calculator\">{importButtons()}</div>\n        </div>\n      </section>\n      <section>\n        <p className=\"copyright\"> &#169; 2024 Nathalie Chang</p>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","export function memory(showNum, selectedBtnValue, memoryStore) {\n  if (selectedBtnValue === \"Memory Save\") {\n    memoryStore = Number(showNum);\n  } else if (selectedBtnValue === \"Memory Recall\") {\n    showNum = memoryStore;\n  } else if (selectedBtnValue === \"Memory Clear\") {\n    memoryStore = 0;\n  } else if (selectedBtnValue === \"Memory Addition\") {\n    memoryStore += Number(showNum);\n  } else if (selectedBtnValue === \"Memory Subtract\") {\n    memoryStore -= Number(showNum);\n  }\n\n  return { memoryStore: memoryStore, showNum: showNum };\n}\n\nexport function doubleDecimalCheck(showNum) {\n  let str = String(showNum);\n  let alreadyHadDecimal = false;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \".\") {\n      alreadyHadDecimal = true;\n    }\n  }\n  return alreadyHadDecimal;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}